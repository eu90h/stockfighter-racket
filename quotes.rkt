#lang racket/base
(provide (all-defined-out))
(define (quote-symbol q)
  (hash-ref q `symbol))
(define (quote-last-price q)
  (hash-ref q `last))
(define (quote-venue q)
  (hash-ref q `venue))
(define (quote-bid q)
  (hash-ref q `bid))
(define (quote-bid-size q)
  (hash-ref q `bidSize))
(define (quote-bid-depth q)
  (hash-ref q `bidDepth))
(define (quote-ask q)
  (hash-ref q `ask))
(define (quote-ask-size q)
  (hash-ref q `askSize))
(define (quote-ask-depth q)
  (hash-ref q `askDepth))
(define (quote-last-size q)
  (hash-ref q `lastSize))
(define (quote-last-time q)
  (hash-ref q `lastTrade))
(define (quote-time q)
  (hash-ref q `quoteTime))
(module+ test
  (require rackunit)
  (define q '#hasheq((symbol . "OJUK")
         (ok . #t)
         (last . 4393)
         (venue . "ESYHEX")
         (bid . 4061)
         (bidSize . 460)
         (askSize . 28)
         (bidDepth . 1380)
         (askDepth . 84)
         (lastSize . 40)
         (lastTrade . "2015-11-29T06:38:18.768165487Z")
         (ask . 4275)
         (quoteTime . "2015-11-29T06:38:18.790384463Z")))
  (check-equal? (quote-last-price q) 4393)
  (check-equal? (quote-venue q) "ESYHEX")
  (check-equal? (quote-bid q) 4061)
  (check-equal? (quote-bid-size q) 460)
  (check-equal? (quote-bid-depth q) 1380)
  (check-equal? (quote-ask q) 4275)
  (check-equal? (quote-ask-size q) 28)
  (check-equal? (quote-ask-depth q) 84)
  (check-equal? (quote-last-size q) 40))